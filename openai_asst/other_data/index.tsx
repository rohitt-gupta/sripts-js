'use client'
import React, { useState } from "react"
import axios from "axios"

/**
 * How tokens are defined?
 * prompt_tokens:
This refers to the number of tokens in the input or "prompt" sent to the model. It includes:

The content of all messages in the conversation history
System messages and instructions
The user's most recent message
Any other context or instructions provided to the model


completion_tokens:
This is the number of tokens in the model's response or "completion". It represents:

The tokens generated by the model as its response
In a chat context, this would be the assistant's reply


total_tokens:
This is simply the sum of prompt_tokens and completion_tokens. It represents the total number of tokens processed in this particular interaction.
 * @returns 
 */

const OpenAIComponent = () => {
  // const [assistantId, setAssistantId] = useState("")
  const [threadId, setThreadId] = useState("")
  const [message, setMessage] = useState("")
  const [runId, setRunId] = useState("")
  const [runData, setRunData] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const API_KEY = "your API key here"
  const assistantId = "assistant id"

  const headers = {
    Authorization: `Bearer ${API_KEY}`,
    'OpenAI-Beta': 'assistants=v2',
    "Content-Type": "application/json",
  }

  // const createAssistant = async () => {
  //   setLoading(true)
  //   setError(null)
  //   try {
  //     const response = await axios.post(
  //       "https://api.openai.com/v1/assistants",
  //       {
  //         name: "My Custom Assistant",
  //         instructions: "You are a helpful assistant.",
  //         model: "gpt-4-turbo-preview",
  //         tools: [{ type: "code_interpreter" }],
  //       },
  //       { headers }
  //     )
  //     setAssistantId(response.data.id)
  //   } catch (err) {
  //     setError(`Error creating assistant: ${err.message}`)
  //   }
  //   setLoading(false)
  // }

  const createThread = async () => {
    setLoading(true)
    setError(null)
    try {
      const response = await axios.post(
        "https://api.openai.com/v1/threads",
        {},
        { headers }
      )
      setThreadId(response.data.id)
    } catch (err) {
      setError(`Error creating thread: ${err.message}`)
    }
    setLoading(false)
  }

  const addMessage = async () => {
    if (!threadId) {
      setError("Please create a thread first")
      return
    }
    setLoading(true)
    setError(null)
    try {
      const response = await axios.post(
        `https://api.openai.com/v1/threads/${threadId}/messages`,
        {
          role: "user",
          content: "Hello, this is a test message.",
        },
        { headers }
      )
      setMessage(response.data.content[0].text.value)
    } catch (err) {
      setError(`Error adding message: ${err.message}`)
    }
    setLoading(false)
  }

  const createRun = async () => {
    if (!assistantId || !threadId) {
      setError("Please create an assistant and a thread first")
      return
    }
    setLoading(true)
    setError(null)
    try {
      const response = await axios.post(
        `https://api.openai.com/v1/threads/${threadId}/runs`,
        { assistant_id: assistantId },
        { headers }
      )
      setRunId(response.data.id)
    } catch (err) {
      setError(`Error creating run: ${err.message}`)
    }
    setLoading(false)
  }

  const checkRunStatus = async () => {
    if (!threadId || !runId) {
      setError("Please create a run first")
      return
    }
    setLoading(true)
    setError(null)
    try {
      let runStatus = "queued"
      while (runStatus !== "completed" && runStatus !== "failed") {
        await new Promise((resolve) => setTimeout(resolve, 1000))
        const response = await axios.get(
          `https://api.openai.com/v1/threads/${threadId}/runs/${runId}`,
          { headers }
        )
        runStatus = response.data.status
        if (runStatus === "completed" || runStatus === "failed") {
          setRunData(response.data)
          break
        }
      }
    } catch (err) {
      setError(`Error checking run status: ${err.message}`)
    }
    setLoading(false)
  }

  return (
    <div>
      <h1>OpenAI Assistant </h1>

      {/* <button onClick={createAssistant}>Create Assistant</button>
      {assistantId && <p>Assistant ID: {assistantId}</p>} */}

      <button onClick={createThread}> Create Thread </button>
      {threadId && <p>Thread ID: {threadId} </p>}

      <button onClick={addMessage}> Add Message: </button>
      {message && <p>Message: {message} </p>}
      <button
        onClick={createRun}
      // disabled={loading || !assistantId || !threadId}
      >
        Create Run
      </button>
      {runId && <p>Run ID: {runId} </p>}

      <button onClick={checkRunStatus}> Check Run Status </button>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: "red" }}> {error} </p>}

      {
        runData && (
          <div>
            <h2>Run Information </h2>
            {
              runData.usage && (
                <div
                  className=""
                  style={{
                    border: "5px solid black",
                    padding: "5px",
                    marginBottom: "8px",
                  }
                  }
                >
                  <h3>Token Usage: </h3>
                  < p > Prompt Tokens: {runData.usage.prompt_tokens} </p>
                  < p > Completion Tokens: {runData.usage.completion_tokens} </p>
                  < p > Total Tokens: {runData.usage.total_tokens} </p>
                </div>
              )}
            <pre>{JSON.stringify(runData, null, 2)} </pre>
          </div>
        )}
    </div>
  )
}

export default OpenAIComponent